// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  favoriteIds     String[]  @db.ObjectId
  orders          Order[]

  accounts Account[]
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  images            String[]
  price             Int
  rating            Int
  inStock           Int
  salePrice         Int?
  variations        String[]

  orderProducts     OrderProduct[]
}

model Variation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  value             String
  meta              String?
  attributeId       String @db.ObjectId

  orderItem OrderProduct @relation(fields: [id], references: [id], onDelete: Cascade)
}


model Attribute {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String?
}

model Order {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  customer          User @relation(fields: [customerId], references: [id])
  customerId        String @db.ObjectId
  orderProducts     OrderProduct[]
  total             Int
  address           String
  delivered         Boolean
  status            Status @default(Created)

}

model OrderProduct {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  product           Product @relation(fields: [productId], references: [id])
  productId         String @db.ObjectId
  order             Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           String  @db.ObjectId
  variations        Variation[]

}

enum Status {
  Created
  NotPaid
  Processing
  Failed
  Paid
}