// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  favoriteIds        String[]  @db.ObjectId
  orders             Order[]
  // cart            Cart[]

  accounts           Account[]
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  images            String[]
  category          String
  price             Int
  rating            Int
  inStock           Int
  salePrice         Int?
  size              String[]
  color             String[]
  properties        Json

  createdAt         DateTime @default(now())

  sliderIDs         String[] @db.ObjectId
  sliders           Slider[]   @relation(fields: [sliderIDs], references: [id])

  // slider            Slider @relation(fields: [sliderId], references: [id], onDelete: Cascade)
  // sliderId          String @db.ObjectId

  // cartId            String? @db.ObjectId 
  // cart              Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  // cart             Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  // cartId           String  @db.ObjectId

  // orderProducts     OrderProduct[]
}

model Order {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String @db.ObjectId
  cart              Json
  address           String
  status            Status @default(Created)
  customer_info     Json
  shipping_info     Json
  payment_info      Json

  createdAt         DateTime @default(now())
}

model Slider {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  link              String?
  // key               String?
  // products          Product[]
  productIDs        String[] @db.ObjectId
  products          Product[]   @relation(fields: [productIDs], references: [id])
}

// model OrderProduct {
//   id                String @id @default(auto()) @map("_id") @db.ObjectId
//   product           Product @relation(fields: [productId], references: [id])
//   productId         String @db.ObjectId
//   order             Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   orderId           String  @db.ObjectId

// }

enum Status {
  Created
  NotPaid
  Processing
  Failed
  Paid
}

// model Cart {
//   id                String @id @default(auto()) @map("_id") @db.ObjectId
//   user              User @relation(fields: [userId], references: [id])
//   userId            String @db.ObjectId 
//   items             Product[]
//   items             Json
//   totalItems        Int
//   total             Int
//   isEmpty           Boolean

//   order             Order @relation(fields: [orderId], references: [id])
//   orderId           String @db.ObjectId @unique 
// }

// export interface State {
//     items: SafeProduct[]
//     isEmpty: boolean;
//     totalItems: number;
//     total: number;
// }

// include: {
//   user: true
// },